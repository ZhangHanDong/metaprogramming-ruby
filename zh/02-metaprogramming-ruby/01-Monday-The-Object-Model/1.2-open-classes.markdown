1.2 开放类(Open Classes)
----------------

*这里比尔带你第一次品味Ruby的类*

在你和比尔浏览了Bookworm源码几分钟以后，你提出了第一个需要重构的地方。Bookworm有一个函数，剥离了一个字符串的所有标点符号和特殊符号，仅仅留下字母数字和空格:

    def to_alphanumeric(s)
      s.gsub /[^\w\s]/, ''
    end
    
这个方法的单元测试:

    require 'test/unit'
    class ToAlphanumericTest < Test::Unit::TestCase
      def test_strips_non_alphanumeric_characters
        assert_equal '3 the Magic Number' , to_alphanumeric('#3, the *Magic, Number*?' )
      end
    end
    
“这个to_alphanumeric( )方法不是很面向对象，是不是？”， 比尔来灵感了，“如果我们能让这个字符串转换它自己，应该比把它传给一个方法好的多。”

虽然你是个新手，无法提供帮助，但是你插嘴道：“但是这只是一个字符串正则表达式。去为它增加方法，我们不得不去写一个新的AlphanumericString类。我不确定这样做值不值得。”

“我想我有一个更简单的方法解决这个问题”， 比尔回答。 它打开了String类， 并且把to_alphanumeric( )放置到那里：

    class String
      def to_alphanumeric
        gsub /[^\w\s]/, ''
      end
    end

比尔也改变了String#to_alphanumeric( )的调用者. 例如，单元测试变成了下面形式:

    require 'test/unit'
      class StringExtensionsTest < Test::Unit::TestCase
        def test_strips_non_alphanumeric_characters
          assert_equal '3 the Magic Number' , '#3, the *Magic, Number*?'.to_alphanumeric
        end
      end

我们需要了解一些关于Ruby类的知识才能理解比尔的技巧。 比尔很乐意去教你 。。。

**深入类定义(Inside Class Definitions)**

在Ruby中， 定义一个类的代码，和其他代码没有什么差别。你可以把任意代码放置到你想放置的类定义中， 就像比尔演示的这个例子:

    3.times do
      class C
        puts "Hello"
      end
    end
    => Hello
       Hello
       Hello

Ruby执行了类中定义的代码，只是因为它可以执行任意代码。这是否意味着，定义了三个相同名字的类？ 并不是这样， 比尔又给出了第二个例子：

    class D
      def x; 'x' ; end
    end

>你应该把你的方法放到哪里?

>在1.2节, 开放类的28页, 比尔演示了如何把to_alphanumeric( )方法移动到String类里。
>但是即使你能这样做，你可能也想知道你是否应该这样做。给系统中的每一个字符串都暴露一个to_alphanumeric()方法是否正确？独立出String类,>单写一个方法， 岂不是更好？ 这次，你处理的是一个非常通用的功能，适用于所有的字符串.所以你能听从比尔的建议，把字母数字的转换放到String类里。
>通常情况如此。 然而， 在你用一大堆特定领域方法污染Ruby标准库之前，请好好想想。 毕竟， 像String这样的类， >带有大量的你必须记住的方法。你可以选择去打开类。你也能定义一个新的AlphanumericString类，甚至可以专门为少数的选定的字符对象增加to_al>phanumeric( )方法 (你会在单例方法的讨论部分学会如何去做(133页)). 在以后的章节，你会学到更多关于打开类的替代方法和他们之间的差异。

    class D
      def y; 'y' ; end
    end
    obj = D.new
    obj.x # => "x"
    obj.y # => "y"

前一段代码， 第一次提到D类的时候，这个类还不存在呢。所以Ruby会按部就班的定义类和x()方法。第二段代码， 类D已经存在， 所以Ruby不需要再定义它，而是重新打开了它，并且在里面定义了y()。

从某种层面来说， Ruby的类关键字，与其说是类声明，还不如说是一个域控制器。确实如此， 它创建了不存在的类， 但是你可能认为这只是它做其他行为产生的副作用。类的核心工作是，为你提供一个可以定义方法的类的上下文。

你可能认为比尔在这吹毛求疵，但是关于类关键字的这些细节并不是夸夸其谈。它有一个重要的实际结果：你总是可以打开一个存在的类，甚至标准库里的类，诸如String或者是Array， 然后让代码飞（运行时修改）。 你可以把这种调用技术叫“打开类（开放类）”

为了演示人们在实际中如何使用打开类。比尔使用了一个真实库中的一个例子。

**示例： Money gem**

比尔使用了一个叫Money的gem包，这是一个用来管理钱和货币单位的工具类集合， 比尔以此来作为打开类的例子。

1 下面是如何创建Money的例子:

    cents = 9999
    # 99.99 US Dollars:
    bargain_price = Money.new(cents)

你可以通过调用Numeric#to_money( )方法，快速的转换任意数字为一个Money对象:

    # 100.00 US Dollars:
    standard_price = 100.to_money()

因为Numeric是Ruby的标准类，你可能想知道Numeric#to_money方法是哪儿来的。通过看Money gem包的源码， 你会发现一段代码， 它打开了Numeric类，并且定义那个方法：

    class Numeric
      def to_money
        Money.new(self * 100)
      end
    end

打开类。 有很多标准库十分普遍的做法。

**打开类（Open Classes）的问题所在**

你和比尔在发现下一个重构点之前， 对打开类的使用并没有考虑太多。Bookworm的源码包含了一个方法， 是用来替换一个数组中的符合条件的元素：

    def replace(array, from, to)
      array.each_with_index do |e, i|
        array[i] = to if e == from
      end
    end

你看都没看replace( )的工作原理, 你只是看了Bookworm的单元测试演示如何去使用它:

    def test_replace
      book_topics = ['html' , 'java' , 'css' ]
      replace(book_topics, 'java' , 'ruby' )
      expected = ['html' , 'ruby' , 'css' ]
      assert_equal expected, book_topics
    end

这一次， 你终于知道怎么去做了。 你以迅雷比尔来不及掩耳之势，抢过了键盘，把这个方法挪到了Array的类里:

    class Array
      def replace(from, to)
        each_with_index do |e, i|
          self[i] = to if e == from
        end
      end
    end

然后你把所有replace()的调用都改成了Array#replace(). 例如，测试变成了现在这样:

    def test_replace
      book_topics = ['html' , 'java' , 'css' ]
      book_topics.replace('java' , 'ruby' )
      sexpected = ['html' , 'ruby' , 'css' ]
      assert_equal expected, book_topics
    end

看上去似乎一切顺利， 直到你运行了Bookworm的单元测试。 这次你傻眼了， 他们不仅没有通过， 而且有很多跟你修改代码无关的测试也报错了。杯具！ 到底发生了什么？

**Monkey See, Monkey Patch**

你的好搭档比尔来给你解围了。 “我想我知道发生了什么”，他又有灵感了。 他祭出了神器－irb， 召唤出Ruby的Array的所有方法列表，然后开始正则匹配re：

    [].methods.grep /^re/ # => [:replace, :reject, :reject!, :respond_to?, ...

靠！ 根据irb输出的信息，你发现了问题所在。Array类已经有了一个叫replace()的方法。 当你定义你自己的replace()方法的时候， 你实际是重写了原来的replace()， 而Bookworm中有一部分代码也依赖与原始的replace()方法。

这是开放类的阴暗面啊，有木有: 如果你胡乱的给类里面加零碎的方法， 你就可能遇到上面的bug. 有一些人看不惯这样野蛮的方式， 就把这类方式起了一个贬义的名称： 他们叫它*Monkeypatch*. 

你和比尔把你自己的Array#replace()方法重命名为Array#substitute()方法， 并且修改了对应的单元测试，和调用它的代码。 你得到了深刻的教训，但是这并没有影响你的态度。  如果有什么影响的话， 那就是这次事故引发了你对Ruby类的好奇心。 事实证明， 比尔很高兴和你探讨这个话题。