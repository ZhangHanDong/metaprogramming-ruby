1.3 关于类的真相
---------------------------

*这里，比尔揭示了关于对象，类和常量的惊人事实.*

“现在”， 比尔说， “我们最好还是停止编码休息一下吧， 顺便花点时间来看看Ruby类背后的理论”. 他正襟危坐， “这次一下就是一大堆理论，如果你真想理解Ruby类和对象背后的机制，这部分是必须要学习的，可别偷懒！”

“我想要你集中全部精力，所以我们去找个安静的地方去谈吧。” 他抓起你的胳膊就把你拽进了会议室。

> **Monkeypatching是邪恶的?**

>在前一页1.2节中标题为 Monkey See, Monkey Patch 的那段里， 比尔告诉过你Monkeypatch是一个贬义词。
>然而， 这个词有时也被用在积极场景，一般是指开放类（31页）。你可以认为有两种类型的Monkeypatches (33). 有些导致错误， 像你和比尔经历过的， 而且，它们总是邪恶的。 另外一些则是存心就这么来用， 并且它们十分有用 - 尤其是当你想按需禁用(bend)一个存在的库的时候。

>即使你认为一切都尽在掌握， 你还是应该小心的使用Monkeypatch。 和任何全局性修改类似， 在一个大型的代码库中，Monkeypatches很难被跟踪。 (一些语言使用命名空间选择器（selector namespaces）来解决这个问题, 这种方式就像是被局限到小范围的Monkeypatches. 这种特性可能被Ruby2.0实现，但是还是别报太大期望了。)

>所以, Monkeypatches真是让人又爱又怕. 那么你如何安全的去使用这种方式呢？在你定义你自己的方法之前，要仔细的检查这个类中存在的方法。你应该认识到，某些变化是有更高风险的。例如， 增加一个新方法通常是比修改一个现有方法更安全些。此外，需要彻底的测试你的代码。在232页的9.2节，你将会看到更多管理Monkeypatches的技术

**解剖对象**

“让我们从基础开始：: 对象和类,” 比尔带你到了会议室后随即宣布. 他打开了笔记本， 运行了irb, 开始键入一些代码:

    class MyClass
      def my_method
        @v = 1
      end
    end
    obj = MyClass.new
    obj.class # => MyClass

比尔构建了一个obj对象.如果你能打开Ruby解释器并且调查obj， 你会看到什么？

**实例变量**

最重要的是， 对象包含实例变量。当然你不能真正的去窥视一个对象， 但你能通过调用Object#instance_variables()方法来达到此目的。 比尔的例子只有一个实例变量:

    obj.my_method
    obj.instance_variables # => [:@v]

不像Java或者其他静态语言， Ruby里一个对象的类和它的实例变量之间并没有什么关联。 实例变量只有在当你给它分配了一个值的时候才产生，所以你才能给同一个类对象的实例变量进行不同的设置。

例如，如果比尔还没有调用obj.my_method()方法， 那么obj就根本不会有实例变量存在。你可以把实例变量的名字和值想象为一个hash的键和值。

比尔戏剧化的扬了扬手， 并说 “这真的是我知道关于实例变量的全部了。 现在，让我们移步到方法。”

**方法**

对象除了有'实例变量'之外,还有'方法'。 通过调用Object#methods()方法，你可以得到一个对象的方法列表。 大多数的对象（包括比尔的那个例子），都从Object继承了一批方法，所以这个方法列表通常都十分长。 比尔用了Array#grep()方法去给你显示obj对象方法列表中的my_method()方法:

    obj.methods.grep(/my/) # => [:my_method]

如果你能打开Ruby解释器一探obj的究竟， 你会注意到，这个对象并没有真正的方法列表。在其内部，只包含它的实例变量和一份它的类的引用(准确的说，它也保护一个唯一标识符，返回一个对象的object_id(), 还包含一个标记，来标志对象的状态，例如， “污染tainted”与“冻结frozen”)。那么，方法都在哪呢？

*图 1.1: 实例变量住在对象里面， 方法在住在类里面*

比尔走向会议室的白板，开始在上面写写画画。 “思考一分钟，”他说， 并且画下了图1.1的内容。 “对象共享同一个类，也共享相同的方法， 所以这些方法一定是被存储在类里面，而不是对象中。”

当你看这张图的时候， 比尔不失时机的突出其中的重要区别： 你可以准确的说， “obj有一个叫my_method()的方法，” 这意味着你能这样用 obj.my_method(). 相反，你不能说“MyClass有一个叫my_method()的方法。”这将导致混乱， 因为如果它是一个类的方法， 意味着你能调用MyClass.my_method()。

为了消除歧义，你应该说my_method()是MyClass的一个实例方法（不只是一个方法）， 意味着它是在MyClass中被定义的， 并且你需要一个实例变量才能够调用它。 同样是方法， 但是当你讨论类的时候，就需要叫它实例方法， 当你讨论对象的时候，你可以简单叫它方法。 记住这个区别， 当你写下面这种内省方法的时候就不会那么困扰了:

    String.instance_methods == "abc".methods # => true
    String.methods == "abc".methods # => false

比尔做了一个总结：一个对象的实例变量驻留在对象本身， 一个对象的方法驻留在这个对象的类中。 这就是为什么同一个类的对象共享方法，但是不共享实例变量的原因。

这就是你必须要掌握的关于对象，实例变量和方法的全部。 但是以为他在图1.1中引入了类， 所以比尔建议你看仔细点。

**再探 － 类**

“现在，我们的朋友， 这可能是你学到过关于Ruby对象模型最重要的东西了,” 比尔故作深沉. “就算是类， 也只不过是对象而已。”

因为类是一个对象， 所以适用于对象的一切，也同样适用于类。 类，像任何对象一样， 有它们自己的类。类只是一个叫Class类的实例:

    "hello".class # => String
    String.class # => Class

像任何对象一样， 类也有方法。 记住比尔在34页1.3节提到的，对象是什么？ 一个对象的方法页是它的类的实例方法。 这就意味着一个类的方法也是Class的实例方法:

    inherited = false
    Class.instance_methods(inherited) # => [:superclass, :allocate, :new]

想必你也了解new( ), 因为你一直用它来创建对象。这个allocate( )是new方法的支持方法（译者注：new方法使用allocate来生成实例,使用initialize来完成初始化）, superclass( )，顾名思义， 返回一个类的超类:

    String.superclass # => Object
    Object.superclass # => BasicObject
    BasicObject.superclass # => nil

所有的类最终都继承自Object, 而Object又继承自BasicObject, BasicObject是Ruby的顶级类（注:在Ruby1.9之前， Object是Ruby的顶级类， 但是从Ruby1.9开始，引入了BasicObject, 在89页开始，你会了解为什么会引入这个类）。比尔也给你展示了Class的超类:

    Class.superclass # => Module
    Module.superclass # => Object

所以，一个类只是被三个方法new(), allocate()和superclass()增强的module - 允许你去创建类或者是继承类。除了这些差异（当然是重要的）， 类和模块大致相同。 你将学到的关于类的大部分内容都适用于模块，反之亦然。

*图 1.2: 类只是一个对象*

比尔用白板上的图和代码片段来总结他的类理论:

    class MyClass; end
    obj1 = MyClass.new
    obj2 = MyClass.new

“看到了吗?” 比尔指着图1.2问道，  “类和正常的对象愉快的相处着.”

这里还有关于“类是对象”主题的最后一个问题: 正如一个正常对象那样， 你通过一个引用来持有一个类。如果你观察上一段代码， 你会看到obj1和MyClass都应该是一个引用 － 它们之间仅有的不同就是obj1是一个变量， 而MyClass是一个常量。 更进一步区分这种不同， 我们这么说： 类只不过是引用为常量的对象。 比尔不失时机的引入了对常量的讨论。

**常量**

任何以大写字母为开头的标识符都是一个常量，包含类名，模块名。 常量的作用域遵循他自己的规则， 并不同于变量的作用域。

>**但也不是Java的对象?**

>事实上，Java和C#中的类也是一个名为Class的实例。C#甚至允许你为一个存在的类增加方法，很像Ruby的开放类(31页)

>然而, Java和C#中的类是十分不同的，并且有更多的限制。例如你不能在运行时创建一个类，改变一个类方法，或者是使用这本书中更多的技巧。 从某种意义上说， 类对象更像类的描述器。所以，Java的File类对于实际的文件来说，更像一个文件的描述符。

>这种灵活性是Ruby元编程的典型: 当其他语言允许你读取类的描述信息的时候， Ruby则允许你在运行时写这些信息。 例如， 你会看到第4章（122页）, Thursday: 类定义， 你能调用Class.new在运行时创建类。

>**What Are Modules Good For?**

>在37页的1.3节， 再探类， 你学到了一个模块实际上是一批实例方法的集合， 并且一个类实际上是多了一些附加功能（superclass和new方法）的模块。实际上， 类和模块是如此亲密的关系，你可能想知道它们之间为什么会存在这样的差别。Ruby就不能用一个单独的“东东”来同时赋予这2种角色的功能？

>同时拥有模块和类的主要原因是 ‘干净’:
>仔细的选择一个类或者是一个模块，你能使你的代码更加清晰。通常，当你想把代码包含到某个地方（或者可能被用作一个命名空间）的时候，你选择模块。 当你想要实例化或者是被继承的时候，你选择类。 所以，根据不同的场景去选择，总归是一个目的， 就是，使你的代码保持清晰。

*图 1.3: Bill’s napkin drawing of a constants tree*

比尔给你展示下面的例子:

    module MyModule
      MyConstant = 'Outer constant'
      class MyClass
        MyConstant = 'Inner constant'
      end
    end

比尔无视他身后的白板，从衬衣口袋里拿出卫生纸来就画起来这段代码的图（图1.3）. 正如他所说， 一个程序所有常量被映射为一个类文件系统， 模块（类）是目录，常规常量是文件。 就像一个文件系统，可以有相同文件名的文件，只要把它们放到不同的目录就可以。

你甚至可以通过它的路径引用一个常量，就像你操作一个文件那样。例如你可以写MyModule::MyClass::MyConstant

Ruby常量和文件的相似性： 你能用模块组织你的常量， 同样你能用目录组织你的文件。 像往常一样， 比尔总有合适的例子。

**Rake的例子**

流行的Ruby构建系统Rake的第一个版本，使用了显示的名字来定义类，例如Task和FileTask. 这些名字和其他不同库的类名很有可能会发生冲突， 为了避免这种冲突， Rake的最新版本定义了一个Rake模块:

    module Rake
      class Task
      # ...

现在Task类的全称是 Rake::Task, 这个名字不太可能和别人定义的冲突。 像Rake这样的模块， 其存在仅仅是为了包含其他的常量， 就叫做命名空间（Namespace）.

如果你有一些比较老的Rake构建文件还在使用， 其中包含了一些没有命名空间的类名，为了保持兼容性， Rake提供了一个命令行选项。这个选项为那些老的，不安全的常量名分配新的，安全的常量名:

    Task = Rake::Task
    FileTask = Rake::FileTask
    FileCreationTask = Rake::FileCreationTask
    # ...

现在Task和Rake::Task都引用于同一个类。所以你能随便使用这2个常量。 (当然， 如果你有相同的问题，这不失是一个好的解决办法)

关于常量的话题就到此为止吧，言归正传，我们对比尔的对象和类的理论来个总结。

>**常量的路径**
>在38页的1.3节，常量， 你学到了常量像是目录与文件。 类似于目录与文件，常量也是被它们的路径作为唯一标识。 常量的路径用2个冒号作为分隔符（这个类似于C++）。:
>
    module M
      class C
        X = 'a constant'
      end
      C::X # => "a constant"
    end
    M::C::X # => "a constant"
>
> 如果你想调用外部的常量， 你能提供一个绝对路径来使用外部的常量， 使用两个冒号作为根路径:
>
    module M
      Y = 'another constant'
      class C
        ::M::Y # => "another constant"
      end
    end
>
> 模块类还提供一个实例方法和一个类方法， 它们都叫constants( ). Module#constants( )返回当前作用域的所有常量， 就像你的文件系统命令ls(或者dir命令，如果你用windows)。 Module.constants( )返回当前程序的顶级常量，包含类名:
>
    M.constants # => [:C, :Y]
    Module.constants[0..1] # => [:Object, :Module]
>
>最后，如果你需要当前的路径， 执行Module.nesting( ):
>
    module M
      class C
        module M2
          Module.nesting # => [M::C::M2, M::C, M]
        end
      end
    end
>

>**修剪你的常量树**
>
>Imagine finding a motd.rb file on the Net that displays a “message
>of the day” on the console. You want to incorporate this
>code into your latest program, so you load the file to execute it
>and display the message:
>
    load('motd.rb' )
>
>Using load( ), however, has a side effect. The motd.rb file probably
>defines variables and classes. Although variables fall out of
>scope when the file has finished loading, constants don’t. As a
>result, motd.rb can pollute your program with the names of its
>own constants—in particular, class names.
>You can force motd.rb to keep its constants to itself by passing
>a second, optional argument to load( ):
>
    load('motd.rb' , true)
>
>If you load a file this way, Ruby creates an anonymous module,
>uses that module as a Namespace (41) to contain all the
>constants from motd.rb, and then destroys the module.
The require( )method is quite similar to load( ), but it’smeant for a
different purpose. You use load( ) to execute code, and you use
require( ) to import libraries. That’s why require( ) has no second
argument: those leftover class names are probably the reason
why you imported the file in the first place.

**Objects and Classes Wrap-Up**

What’s an object? It’s just a bunch of instance variables, plus a link to
a class. The object’s methods don’t live in the object—they live in the
object’s class, where they’re called the instance methods of the class.
What’s a class? It’s just an object (an instance of Class), plus a list of
instance methods and a link to a superclass. Class is a subclass of
Module, so a class is also a module.

Like any object, a class has its own methods, such as new( ). These are
instance methods of the Class class. Also like any object, classes must
be accessed through references. You already have a constant reference
to each class: the class’s name.

“That’s pretty much all there is to know about objects and classes,”
Bill asserts. “If you can understand this, you’re well on your way to
understanding metaprogramming. Now, let’s turn back to the code.”

**Another Learning Opportunity**

It takes only a short while for you and Bill to get a chance to apply your
newfound knowledge about classes. After ten minutes sifting through
the Bookworm source code, you stumble upon a class that represents
a snippet of text out of a book:

    class TEXT
      # ...

Since the names of Ruby classes are conventionally camel cased,10 you
and Bill rename this class Text:

    class Text
      # ...

You change the name of the class everywhere it’s used, you run the unit
tests, and—surprise!—the tests fail with a cryptic error message:

    TypeError: Text is not a class

“D’oh! Of course it is,” you exclaim. Bill is as puzzled as you are, so it
takes the two of you some time to find the cause of the problem. As it
turns out, the Bookworm application requires a popular library named
ActionMailer. ActionMailer, in turn, uses a text-formatting library that
defines a module named—you guessed it—Text:

    module Text
      # ...

That’s where the problem lies: since Text is already the name of a module,
Ruby complains that it can’t also be the name of a class at the
same time. In a sense, you were lucky that this name clash was readily
apparent. If ActionMailer’s Text had been a class, you might have
never noticed that this name already existed. Instead, you’d have inadvertently Monkeypatched (33) the existing Text class, with unpredictable
results. (On the other hand, as Bill puts it, “That’s what unit tests
are for.”)

*Figure 1.4: Bill’s object model diagram again*

Fixing the clash between your Text class and ActionMailer’s Text module
is as easy as wrapping your class in a Namespace (41):

    module Bookworm
      class Text
        # ...

You and Bill also change all references to Text into references to Bookworm::
Text. It’s unlikely that an external library defines a class named
Bookworm::Text, so you should be safe from clashes now.

That was a lot of learning in a single sitting! You deserve a break and a
cup of coffee—and a little quiz.